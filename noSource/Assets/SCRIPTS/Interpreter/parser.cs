// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DYLAN-LAP
// DateTime: 3/7/2016 1:12:02 PM
// UserName: Dylan
// Input file <parser.y - 3/7/2016 1:11:52 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Interpreter
{
public enum Tokens {
    error=127,EOF=128,VOID=129,BOOL=130,CHAR=131,INT=132,
    STRING=133,WHILE=134,FLOAT=135,FALSE=136,TRUE=137,NULL=138,
    ARRAY=139,IDENT=140,INTCON=141,CHARCON=142,STRINGCON=143,FLOATCON=144,
    ROOT=145,UPDATE=146,PLAYER=147,DECLROOT=148,UPDATEROOT=149,FIELD=150,
    PARAMLIST=151,BLOCK=152,IFELSE=153,INITDECL=154,VARDECL=155,NEWSTRING=156,
    NEWARRAY=157,INDEX=158,IF=159,ELSE=160,EQ=161,NE=162,
    LT=163,LE=164,GT=165,GE=166,POS=167,NEG=168,
    NEW=169,CALL=170};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ASTree,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ASTree yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ASTree val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ASTree, LexLocation>
{
  // Verbatim content from parser.y - 3/7/2016 1:11:52 PM
#line 2 "parser.y"
#line default
  // End verbatim content from parser.y - 3/7/2016 1:11:52 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[36];
  private static State[] states = new State[60];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "structure", "decls", "program", "decl", "const", "statement", 
      "expr", };

  static Parser() {
    states[0] = new State(-8,new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{146,5,127,51,147,54,128,-4},new int[]{-6,50});
    states[5] = new State(new int[]{123,6});
    states[6] = new State(-13,new int[]{-5,7});
    states[7] = new State(new int[]{125,8,127,10,33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-8,9,-9,13,-7,42});
    states[8] = new State(-3);
    states[9] = new State(-10);
    states[10] = new State(new int[]{125,11,59,12});
    states[11] = new State(-11);
    states[12] = new State(-12);
    states[13] = new State(new int[]{59,14,61,15,43,17,45,19,42,21,47,23,161,25,162,27,163,29,164,31,165,33,166,35});
    states[14] = new State(-14);
    states[15] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,16,-7,42});
    states[16] = new State(new int[]{61,15,43,17,45,19,42,21,47,23,161,25,162,27,163,29,164,31,165,33,166,35,59,-15,41,-15});
    states[17] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,18,-7,42});
    states[18] = new State(new int[]{61,-16,43,-16,45,-16,42,21,47,23,161,-16,162,-16,163,-16,164,-16,165,-16,166,-16,59,-16,41,-16});
    states[19] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,20,-7,42});
    states[20] = new State(new int[]{61,-17,43,-17,45,-17,42,21,47,23,161,-17,162,-17,163,-17,164,-17,165,-17,166,-17,59,-17,41,-17});
    states[21] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,22,-7,42});
    states[22] = new State(-18);
    states[23] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,24,-7,42});
    states[24] = new State(-19);
    states[25] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,26,-7,42});
    states[26] = new State(new int[]{61,-20,43,17,45,19,42,21,47,23,161,-20,162,-20,163,-20,164,-20,165,-20,166,-20,59,-20,41,-20});
    states[27] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,28,-7,42});
    states[28] = new State(new int[]{61,-21,43,17,45,19,42,21,47,23,161,-21,162,-21,163,-21,164,-21,165,-21,166,-21,59,-21,41,-21});
    states[29] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,30,-7,42});
    states[30] = new State(new int[]{61,-22,43,17,45,19,42,21,47,23,161,-22,162,-22,163,-22,164,-22,165,-22,166,-22,59,-22,41,-22});
    states[31] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,32,-7,42});
    states[32] = new State(new int[]{61,-23,43,17,45,19,42,21,47,23,161,-23,162,-23,163,-23,164,-23,165,-23,166,-23,59,-23,41,-23});
    states[33] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,34,-7,42});
    states[34] = new State(new int[]{61,-24,43,17,45,19,42,21,47,23,161,-24,162,-24,163,-24,164,-24,165,-24,166,-24,59,-24,41,-24});
    states[35] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,36,-7,42});
    states[36] = new State(new int[]{61,-25,43,17,45,19,42,21,47,23,161,-25,162,-25,163,-25,164,-25,165,-25,166,-25,59,-25,41,-25});
    states[37] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,38,-7,42});
    states[38] = new State(-26);
    states[39] = new State(new int[]{33,37,40,39,141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-9,40,-7,42});
    states[40] = new State(new int[]{41,41,61,15,43,17,45,19,42,21,47,23,161,25,162,27,163,29,164,31,165,33,166,35});
    states[41] = new State(-27);
    states[42] = new State(-28);
    states[43] = new State(-29);
    states[44] = new State(-30);
    states[45] = new State(-31);
    states[46] = new State(-32);
    states[47] = new State(-33);
    states[48] = new State(-34);
    states[49] = new State(-35);
    states[50] = new State(-5);
    states[51] = new State(new int[]{125,52,59,53});
    states[52] = new State(-6);
    states[53] = new State(-7);
    states[54] = new State(new int[]{46,55});
    states[55] = new State(new int[]{140,56});
    states[56] = new State(new int[]{61,57});
    states[57] = new State(new int[]{141,43,142,44,143,45,144,46,137,47,136,48,138,49},new int[]{-7,58});
    states[58] = new State(new int[]{59,59});
    states[59] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,146,123,-5,125});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-4, new int[]{-4,-6});
    rules[6] = new Rule(-4, new int[]{-4,127,125});
    rules[7] = new Rule(-4, new int[]{-4,127,59});
    rules[8] = new Rule(-4, new int[]{});
    rules[9] = new Rule(-6, new int[]{147,46,140,61,-7,59});
    rules[10] = new Rule(-5, new int[]{-5,-8});
    rules[11] = new Rule(-5, new int[]{-5,127,125});
    rules[12] = new Rule(-5, new int[]{-5,127,59});
    rules[13] = new Rule(-5, new int[]{});
    rules[14] = new Rule(-8, new int[]{-9,59});
    rules[15] = new Rule(-9, new int[]{-9,61,-9});
    rules[16] = new Rule(-9, new int[]{-9,43,-9});
    rules[17] = new Rule(-9, new int[]{-9,45,-9});
    rules[18] = new Rule(-9, new int[]{-9,42,-9});
    rules[19] = new Rule(-9, new int[]{-9,47,-9});
    rules[20] = new Rule(-9, new int[]{-9,161,-9});
    rules[21] = new Rule(-9, new int[]{-9,162,-9});
    rules[22] = new Rule(-9, new int[]{-9,163,-9});
    rules[23] = new Rule(-9, new int[]{-9,164,-9});
    rules[24] = new Rule(-9, new int[]{-9,165,-9});
    rules[25] = new Rule(-9, new int[]{-9,166,-9});
    rules[26] = new Rule(-9, new int[]{33,-9});
    rules[27] = new Rule(-9, new int[]{40,-9,41});
    rules[28] = new Rule(-9, new int[]{-7});
    rules[29] = new Rule(-7, new int[]{141});
    rules[30] = new Rule(-7, new int[]{142});
    rules[31] = new Rule(-7, new int[]{143});
    rules[32] = new Rule(-7, new int[]{144});
    rules[33] = new Rule(-7, new int[]{137});
    rules[34] = new Rule(-7, new int[]{136});
    rules[35] = new Rule(-7, new int[]{138});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> structure
#line 33 "parser.y"
                           { this.ParserRoot = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 3: // structure -> decls, UPDATE, '{', program, '}'
#line 36 "parser.y"
                                            { CurrentSemanticValue = ParserNewRoot(Tokens.ROOT).Adopt(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 4: // structure -> decls
#line 37 "parser.y"
                    { CurrentSemanticValue = ParserNewRoot(Tokens.ROOT).Adopt(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 5: // decls -> decls, decl
#line 40 "parser.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 6: // decls -> decls, error, '}'
#line 41 "parser.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 7: // decls -> decls, error, ';'
#line 42 "parser.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 8: // decls -> /* empty */
#line 43 "parser.y"
               { CurrentSemanticValue = ParserNewRoot(Tokens.DECLROOT); }
#line default
        break;
      case 9: // decl -> PLAYER, '.', IDENT, '=', const, ';'
#line 46 "parser.y"
                                         { CurrentSemanticValue = new ASTree((int)Tokens.VARDECL, 0, 0, "=").Adopt(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 10: // program -> program, statement
#line 49 "parser.y"
                                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 11: // program -> program, error, '}'
#line 50 "parser.y"
                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 12: // program -> program, error, ';'
#line 51 "parser.y"
                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 13: // program -> /* empty */
#line 52 "parser.y"
               { CurrentSemanticValue = ParserNewRoot(Tokens.UPDATEROOT); }
#line default
        break;
      case 14: // statement -> expr, ';'
#line 57 "parser.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 15: // expr -> expr, '=', expr
#line 60 "parser.y"
                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // expr -> expr, '+', expr
#line 61 "parser.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // expr -> expr, '-', expr
#line 62 "parser.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 18: // expr -> expr, '*', expr
#line 63 "parser.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // expr -> expr, '/', expr
#line 64 "parser.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 20: // expr -> expr, EQ, expr
#line 65 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 21: // expr -> expr, NE, expr
#line 66 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 22: // expr -> expr, LT, expr
#line 67 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // expr -> expr, LE, expr
#line 68 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // expr -> expr, GT, expr
#line 69 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // expr -> expr, GE, expr
#line 70 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // expr -> '!', expr
#line 71 "parser.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-2].Adopt(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 27: // expr -> '(', expr, ')'
#line 73 "parser.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 28: // expr -> const
#line 74 "parser.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 29: // const -> INTCON
#line 77 "parser.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // const -> CHARCON
#line 78 "parser.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 31: // const -> STRINGCON
#line 79 "parser.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 32: // const -> FLOATCON
#line 80 "parser.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 33: // const -> TRUE
#line 81 "parser.y"
                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 34: // const -> FALSE
#line 82 "parser.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 35: // const -> NULL
#line 83 "parser.y"
                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 86 "parser.y"
#line default
}
}
